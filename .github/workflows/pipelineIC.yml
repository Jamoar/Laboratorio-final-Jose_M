name: Workflow 
on:
  push:
    branches:
      - "feature-lab-final-Jose_m"

jobs:
#------------------------------------------------SAST-----------------------------------------  
  SAST: 
    runs-on: ubuntu-latest
    steps:



      - name: Setup Node.js 18
        uses: actions/setup-node@v2
        with:
          node-version: '18'



      - name: Clonacion de codigo
        uses: actions/checkout@v2



      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'



      - name: Validando existencia de proyecto en SonarCloud
        id: validateProjectOnSonar
        run: |
          set +e
          curl -f -X POST -u '${{ secrets.SONAR_TOKEN}}:' 'https://sonarcloud.io/api/projects/create' -d 'name=${{github.event.repository.name }}' -d 'project=${{github.event.repository.name }}'  -d 'organization=jamoar' -d 'visibility=public'
          if [ $? -ne 0 ]
          then
            echo "Proyecto ya existe en SonarCloud"
          Else
            echo "Proyecto ${{github.event.repository.name }} Fue creado existosamente en SonarCloud"
            echo "Se establece rama main como rama por defecto" 
            curl -X POST -u '${{ secrets.SONAR_TOKEN}}:' 'https://sonarcloud.io/api/project_branches/rename' -d 'name=main' -d 'project=${{github.event.repository.name }}' 
          fi


          
      - name: Instalar SonarCloud 
        run: npm install sonar-scanner --save-dev
  



      - name: Analisis sonarCloud
        run: |
            npx sonar-scanner \
             -Dsonar.projectKey=Jamoar_Laboratorio-final-Jose_M \
             -Dsonar.organization=jamoar \
             -Dsonar.sources=. \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
              -Dsonar.branch.name=feature-lab-final-Jose_m

              

    #  - name: SonarQube Quality Gate Check
    #    env:
    #      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #    uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
    #    with:
    #      scanMetadataReportFile: './.scannerwork/report-task.txt'
 



#------------------------------------------------SCA-----------------------------------------          
 
  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:


    - name: Checkout code
      uses: Actions/checkout@v2

    #- name: Build
    #  run: | 
    #    chmod 777 gradlew
    #    .gradlew build


    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@1.1.0
      env:
        JAVA_HOME: /opt/jdk
      id: Depcheck
      with:
        project: '${{ github.event.repository.name }}'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired

    - name: Upload Test result
      uses: actions/upload-artifact@master
      with:
        name: Depcheck report
        path: ${{github.workspace}}/reports

    - name: Upload JAR
      uses: actions/upload-artifact@master
      with:
        name: Jar
        path: ${{github.workspace}}/build/libs/spring-laboratorio-final-Jose_m-2-6-0.jar        
        

#-----------------------Docker Build Image------------------------------------

  DockerBuild:
    needs: [SCA, SAST]
    runs-on: self-hosted
    steps:

    - name: Checkout code
      uses: actions/checkout@v2


   # - name: Set up Node.js
   #   uses: actions/setup-node@v4
   #   with:
   #     node-version: '20'
        
   # - name: Install Yarn
   #   run: npm install -g yarn

   # - name: Install dependencies
   #   run: yarn install


    - name: Login Docker
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}


    - name: Set up Docker 
      uses: docker/setup-buildx-action@v3


    - name: Build Docker
      run: |
           docker build --build-arg TMDB_V3_API_KEY=${{ secrets.TMDB_API_KEY }} --tag josemorales20/lab_final:latest .
  

    - name: Push Docker
      run: |
       docker push ${{ secrets.DOCKER_USER }}/lab_final:latest
          
          
#-----------------------Docker Scan------------------------------------

  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:

    - name: Login Docker
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.USUARIO_DOKER }}
        password: ${{ secrets.DOCKER_PASSWORD }}


    - name: Pull de la imagen Docker
      run: |
        docker pull ${{ secrets.USUARIO_DOKER }}/laboratorio_final:latest    

  #  - name: Run Trivy vulnerability scanner
  #    uses: aquasecurity/trivy-action@master
  #    with:
  #        image-ref: ${{ secrets.USUARIO_DOKER }}/laboratorio_final:latest
  #        format: 'table'   